// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gantry/service/v1/service.proto

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GantryService_CreateBucket_FullMethodName = "/gantry.service.v1.GantryService/CreateBucket"
)

// GantryServiceClient is the client API for GantryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GantryServiceClient interface {
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
}

type gantryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGantryServiceClient(cc grpc.ClientConnInterface) GantryServiceClient {
	return &gantryServiceClient{cc}
}

func (c *gantryServiceClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, GantryService_CreateBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GantryServiceServer is the server API for GantryService service.
// All implementations must embed UnimplementedGantryServiceServer
// for forward compatibility.
type GantryServiceServer interface {
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	mustEmbedUnimplementedGantryServiceServer()
}

// UnimplementedGantryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGantryServiceServer struct{}

func (UnimplementedGantryServiceServer) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedGantryServiceServer) mustEmbedUnimplementedGantryServiceServer() {}
func (UnimplementedGantryServiceServer) testEmbeddedByValue()                       {}

// UnsafeGantryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GantryServiceServer will
// result in compilation errors.
type UnsafeGantryServiceServer interface {
	mustEmbedUnimplementedGantryServiceServer()
}

func RegisterGantryServiceServer(s grpc.ServiceRegistrar, srv GantryServiceServer) {
	// If the following call pancis, it indicates UnimplementedGantryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GantryService_ServiceDesc, srv)
}

func _GantryService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GantryServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GantryService_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GantryServiceServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GantryService_ServiceDesc is the grpc.ServiceDesc for GantryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GantryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gantry.service.v1.GantryService",
	HandlerType: (*GantryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucket",
			Handler:    _GantryService_CreateBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gantry/service/v1/service.proto",
}
